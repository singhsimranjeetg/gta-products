create react app comes with all the configuration we need for sass
to convert sass into css files, our browsers can only understand the css

app.js - info for the routing for the pages components
we can use any Oauth sign in with any provider, like twiter and google 
then we have to go to firebase and enable the one we wanna allow it for


all files 
components
1. directory - applies once for our homepage all menu items
2. menu-item - applies once for our each menu item
3. preview collection - - applies onces for our all shop page items, only shows four four one type of item
4.item-collection - applies once for our each collection item
5. header - applies once on whole header.
6. signin - applies once on all input fields for signin comp. with FormInput comp
7.signup-applies once on all the input fields for signup comp. with forminput
8. form-input- applies once on each input field and this way we can create as many FormInput comp as possible 
9. custom button - applies once on each button. 






pages
1. homepage - responsible for showing homepage component on localhost 3000
2. shop - responsible for showing all collection items on the /shop url
3.signInAndSignUp - responsible for showing signin and sign up components 
 
firebase.utils 
contains all the info for the firestore db and auth, authentication 

redux
1.root-reducer = contains all the child reducers
2.store = creates a store with root reducer and middleware

3.user-reducer = stores the userreducer function with switch and case 
4.users-action - stores the action for the userReducer and states its type and payload.




How the cart reducer work - 
for the cart icon in the cart-icon.comp we use mapdispatchtoprops that takes that action onclick on the cart-icon and pass the actions
of togglehidden to the cart reducer. in the header comp we use mapStatetoprops to get those props off the state and 
pass them to cart-dropdown and sign-in components.




super important concepts
once the state gets fired by any component, it re renders the whole state from the root reducer.
every time when any action happens on the state, all the mapSatetoprops functions gets called again.

Memoization -  for Example we clicked on the sign in button, the set_current_user action gets callled 
and due to how redux works, at every action it gives us a brand new state which means a brand new state object,
when the action happens , all the mapSatetoprops get called for all other action too,like cart icon or cart dropdown,
and when a mapSatetoprops gets called it passes a new object or value to the comp, due to that our comp gets re render 
again, it affects our performance and slow the speed. 

we use redux -reselect library to avoid this, it actually figres out if that action affects the specific reducer, obj or not and
does not call the mapSatetoprops for other comp , so the obj value for that comp remain same, that why react know not to render that comp again.



React Router 

If we dont use exact in the <Route> it will also render the parent components
we use match.path for Route to tell which comp we wanna render on this path
we use match.url for Link to tell which path we wanna go to from this link.


Rendering comp did mount - issue firing the fetch method in collection page
bcz we invoke the fetch fx inside the compdidmount method, but render fires before that and use the initial state and fx never invokess






