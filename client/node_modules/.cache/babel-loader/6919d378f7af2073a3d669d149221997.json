{"ast":null,"code":"//pulling in the firebase utility library which belong from this file\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //for database\n\nimport \"firebase/auth\"; //for authentication\n\nconst config = {\n  apiKey: \"AIzaSyBMbCbyYNs274zYWIgqIMQjX0SCUJdCG3w\",\n  authDomain: \"gtaproducts-db.firebaseapp.com\",\n  databaseURL: \"https://gtaproducts-db.firebaseio.com\",\n  projectId: \"gtaproducts-db\",\n  storageBucket: \"gtaproducts-db.appspot.com\",\n  messagingSenderId: \"720816448904\",\n  appId: \"1:720816448904:web:fda3534eefb30ac139063d\",\n  measurementId: \"G-2BWRJX5PFW\"\n};\nfirebase.initializeApp(config); //initializing the config app\n//creating new user in db start\n//fx to get the users obj from the auth and store it in db's users collection\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //return null if user is sign out bcz null is passed form app.js \n  //userAuth is the firebase data from our authentication optins\n  // const userRef = firestore.doc(\"/users/HkgewdKW2RNmcchEm9Uq\") returns true for bcz this doc exists in the users collection\n  //executes this if user is sign in \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //console.log(userRef) //this userref return an object with db doc id and few other prop of that doc.\n\n  const snapShot = await userRef.get(); //console.log(snapShot) //this snapshot returns almost same db object with exists boolean prop\n  //the exists prop returns true if there is already a doc with same uid in the user collectionn\n  //the exists prop return false if there is no doc in db with same id that got generated in auth \n\n  if (!snapShot.exists) {\n    //in order to get see data, we have to use .data() mathod on snapshot\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create a new user obj in db if not already exists \n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(\"error creating a new user\", err.message);\n    }\n  }\n\n  return userRef;\n}; //creating new user in db finished\n//function to make new collections and documents \n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch(); //forEach is similar to the map method excepts it doesnt return a new array.\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //So what this will do is it's telling firebase give me a new document reference in this collection\n    //console.log(newDocRef)\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit(); //it will fire the batch\n}; //finishes here\n//getting snapshot from shop comp and converting the db obj to the desired format\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    //.docs method will point to the documents in collections and .data will get the objects \n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //using the reduce method on all the object and assigning a property name to each of them\n\n  console.log(transformedCollections);\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurretnUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth(); //exporting the auth with auth variable\n\nexport const firestore = firebase.firestore(); //exporting the db \n//setting up google authentication utility\n//give access to googleauth class from the auth library\n\nexport const googleprovider = new firebase.auth.GoogleAuthProvider();\ngoogleprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); //export the var that use auth method form firebase and use the signineithPopup with provider that is google in this case\n\nexport const SignInWithGoogle = () => auth.signInWithPopup(googleprovider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurretnUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleprovider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["//pulling in the firebase utility library which belong from this file\r\nimport firebase from \"firebase/app\";   \r\nimport \"firebase/firestore\"; //for database\r\nimport \"firebase/auth\"  //for authentication\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBMbCbyYNs274zYWIgqIMQjX0SCUJdCG3w\",\r\n    authDomain: \"gtaproducts-db.firebaseapp.com\",\r\n    databaseURL: \"https://gtaproducts-db.firebaseio.com\",\r\n    projectId: \"gtaproducts-db\",\r\n    storageBucket: \"gtaproducts-db.appspot.com\",\r\n    messagingSenderId: \"720816448904\",\r\n    appId: \"1:720816448904:web:fda3534eefb30ac139063d\",\r\n    measurementId: \"G-2BWRJX5PFW\"\r\n  }\r\n\r\n  firebase.initializeApp(config)   //initializing the config app\r\n  //creating new user in db start\r\n\r\n  //fx to get the users obj from the auth and store it in db's users collection\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if(!userAuth) return //return null if user is sign out bcz null is passed form app.js \r\n    //userAuth is the firebase data from our authentication optins\r\n   // const userRef = firestore.doc(\"/users/HkgewdKW2RNmcchEm9Uq\") returns true for bcz this doc exists in the users collection\r\n    \r\n\r\n   //executes this if user is sign in \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`) \r\n    //console.log(userRef) //this userref return an object with db doc id and few other prop of that doc.\r\n\r\n    const snapShot = await userRef.get()  \r\n    //console.log(snapShot) //this snapshot returns almost same db object with exists boolean prop\r\n    //the exists prop returns true if there is already a doc with same uid in the user collectionn\r\n    //the exists prop return false if there is no doc in db with same id that got generated in auth \r\n\r\n    if(!snapShot.exists) {    //in order to get see data, we have to use .data() mathod on snapshot\r\n        const {displayName, email} = userAuth\r\n        const createdAt = new Date()\r\n\r\n        try {                      //create a new user obj in db if not already exists \r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n                          })\r\n        }\r\n        catch(err) {\r\n            console.log(\"error creating a new user\", err.message)\r\n        }   \r\n    }\r\n    return userRef\r\n}\r\n//creating new user in db finished\r\n\r\n\r\n\r\n//function to make new collections and documents \r\n export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n   const collectionRef = firestore.collection(collectionKey)\r\n   console.log(collectionRef)\r\n\r\n   const batch = firestore.batch()    //forEach is similar to the map method excepts it doesnt return a new array.\r\n   objectsToAdd.forEach(obj => {\r\n     const newDocRef = collectionRef.doc()     //So what this will do is it's telling firebase give me a new document reference in this collection\r\n     //console.log(newDocRef)\r\n     batch.set(newDocRef, obj)\r\n   })\r\n   return await batch.commit() //it will fire the batch\r\n }  \r\n\r\n //finishes here\r\n\r\n\r\n\r\n//getting snapshot from shop comp and converting the db obj to the desired format\r\n\r\nexport const convertCollectionsSnapshotToMap = collections => {\r\n  const transformedCollections = collections.docs.map(doc => {    //.docs method will point to the documents in collections and .data will get the objects \r\n    const {title, items} = doc.data()\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n\r\n  }) //using the reduce method on all the object and assigning a property name to each of them\r\n  console.log(transformedCollections)\r\n  return transformedCollections.reduce((accumulator, collection ) => {\r\n    accumulator[collection.title.toLowerCase()] = collection\r\n    return accumulator\r\n  }, {})\r\n\r\n}\r\n\r\n\r\n  export const getCurretnUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n        unsubscribe()\r\n        resolve(userAuth)\r\n      }, reject)\r\n    })\r\n  }\r\n\r\n \r\n\r\n  export const auth = firebase.auth() //exporting the auth with auth variable\r\n  export const firestore = firebase.firestore()   //exporting the db \r\n\r\n  //setting up google authentication utility\r\n//give access to googleauth class from the auth library\r\n export const googleprovider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  googleprovider.setCustomParameters({prompt: \"select_account\"})\r\n  \r\n  //export the var that use auth method form firebase and use the signineithPopup with provider that is google in this case\r\n  export const SignInWithGoogle = () => auth.signInWithPopup(googleprovider)\r\n\r\n  export default firebase\r\n\r\n\r\n  \r\n"]},"metadata":{},"sourceType":"module"}