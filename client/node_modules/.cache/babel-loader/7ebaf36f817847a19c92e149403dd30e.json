{"ast":null,"code":"import { cartActionTypes } from \"./cart.types\"; //import {userActionTypes} from \"../user/user.types\"\n\nimport { addItemsToCart, removeItemFromCart } from \"./cart.utils\";\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: [\"hell0\"]\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case cartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        //we are not touching the other prop of initial state\n        hidden: !state.hidden\n      };\n\n    case cartActionTypes.ADD_ITEM:\n      return { ...state,\n        cartItems: addItemsToCart(state.cartItems, action.payload) //cartItems: [...state.cartItems, action.payload]  //we are just passing all prev items in array\n        //and also unshifting the payload in it.\n\n      };\n\n    case cartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        //speading everything else in our state \n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id //if any cartItem id matches the item in the payload , filter it out\n        //filter will only return the items which pass this condition\n        )\n      };\n\n    case cartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/cart/cart.reducer.js"],"names":["cartActionTypes","addItemsToCart","removeItemFromCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","CLEAR_ITEM_FROM_CART","filter","cartItem","id","REMOVE_ITEM"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B,C,CACA;;AACA,SAAQC,cAAR,EAAwBC,kBAAxB,QAAiD,cAAjD;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,SAAS,EAAE,CAAC,OAAD;AAFO,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,eAAe,CAACU,kBAArB;AACI,aAAO,EACH,GAAGH,KADA;AACS;AACZH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFZ,OAAP;;AAKA,SAAKJ,eAAe,CAACW,QAArB;AACI,aAAO,EACH,GAAGJ,KADA;AAEHF,QAAAA,SAAS,EAAEJ,cAAc,CAACM,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB,CAFtB,CAGH;AACA;;AAJG,OAAP;;AAOJ,SAAKZ,eAAe,CAACa,oBAArB;AACC,aAAO,EACH,GAAGN,KADA;AACQ;AACXF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBS,MAAhB,CACPC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACI,OAAP,CAAeI,EADpC,CACwC;AAC/C;AAFO;AAFR,OAAP;;AAQA,SAAKhB,eAAe,CAACiB,WAArB;AACI,aAAO,EACH,GAAGV,KADA;AAEHF,QAAAA,SAAS,EAAEH,kBAAkB,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAF1B,OAAP;;AAKL;AACI,aAAOL,KAAP;AA/BZ;AAiCH,CAlCD;;AAoCA,eAAeD,WAAf","sourcesContent":["import {cartActionTypes} from \"./cart.types\"\r\n//import {userActionTypes} from \"../user/user.types\"\r\nimport {addItemsToCart, removeItemFromCart} from \"./cart.utils\"\r\n\r\nconst INITIAL_STATE = {\r\n    hidden: true,\r\n    cartItems: [\"hell0\"]\r\n}\r\n\r\nconst cartReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case cartActionTypes.TOGGLE_CART_HIDDEN:\r\n            return {\r\n                ...state,   //we are not touching the other prop of initial state\r\n                hidden: !state.hidden,\r\n                \r\n            }\r\n            case cartActionTypes.ADD_ITEM:\r\n                return {\r\n                    ...state,\r\n                    cartItems: addItemsToCart(state.cartItems, action.payload) \r\n                    //cartItems: [...state.cartItems, action.payload]  //we are just passing all prev items in array\r\n                    //and also unshifting the payload in it.\r\n                }\r\n\r\n            case cartActionTypes.CLEAR_ITEM_FROM_CART: \r\n             return {\r\n                 ...state,  //speading everything else in our state \r\n                 cartItems: state.cartItems.filter(\r\n                     cartItem => cartItem.id !== action.payload.id  //if any cartItem id matches the item in the payload , filter it out\r\n                     //filter will only return the items which pass this condition\r\n                 )\r\n             }\r\n\r\n             case cartActionTypes.REMOVE_ITEM:\r\n                 return {\r\n                     ...state,\r\n                     cartItems: removeItemFromCart(state.cartItems, action.payload)\r\n                 }\r\n                 \r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nexport default cartReducer"]},"metadata":{},"sourceType":"module"}