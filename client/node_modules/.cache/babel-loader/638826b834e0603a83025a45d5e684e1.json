{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { userActionTypes } from \"./user.types\";\nimport { auth, googleprovider, createUserProfileDocument, getCurretnUser } from \"../../firebase/firebase.utils\";\nimport { SignInSuccess, SignInFailure } from \"./users.actions\"; //import {googleSignInStart, emailSignInStart} from \"./users.actions\"\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\n//using this reuseable function bcz both email and google sign in get the same user object.\n\nexport function* getSnapshotFromAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* googleSignInAsyc() {\n  //yield console.log(\"hello\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleprovider); //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\n    // console.log(userRef) this userRef is the same userAuth object we were in App.js\n    //de structuring the user property off the obj returned by the aboove method and storing it in user var.\n\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* googleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc);\n}\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  //console.log(\"ballle mundya\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error)); //yield console.log(error.message)\n    // yield console.log(password)\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync);\n}\nexport function* isUserAuthenticated() {\n  yield console.log(\"gdfjgdfc\");\n\n  try {\n    const userAuth = getCurretnUser(); //this fx will return us the same user obj as other aysnc fx\n\n    if (!userAuth) return; //if no user obj received, then return the fx \n\n    yield getSnapshotFromAuth(userAuth); //otherwise pass the obj to above fx and it will make trigger the sign in success action.\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* checkUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(checkUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","userActionTypes","auth","googleprovider","createUserProfileDocument","getCurretnUser","SignInSuccess","SignInFailure","getSnapshotFromAuth","userAuth","userRef","userSnapshot","get","id","data","error","googleSignInAsyc","user","signInWithPopup","googleSignInStart","GOOGLE_SIGNIN_START","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGNIN_START","isUserAuthenticated","console","log","checkUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,QAAyC,oBAAzC;AAEA,SAASC,eAAT,QAA+B,cAA/B;AAEA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA8E,+BAA9E;AAEA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,iBAA3C,C,CAEA;AAEA;AAEA;;AACA,OAAO,UAAUC,mBAAV,CAA8BC,QAA9B,EAAuC;AAC1C,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACK,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAGF,YAAY,CAACE,EAApB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAD,CAAd,CAAT;AAGF,GANF,CAME,OAAMC,KAAN,EAAY;AACX,UAAMjB,GAAG,CAAES,aAAa,CAACQ,KAAD,CAAf,CAAT;AACD;AACD;AAEL,OAAO,UAAUC,gBAAV,GAA4B;AAC/B;AAEA,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAArB,CADA,CAC0D;AAC3D;AACA;;AACH,UAAMK,mBAAmB,CAACS,IAAD,CAAzB;AACC,GALD,CAKC,OAAMF,KAAN,EAAY;AACX,UAAMjB,GAAG,CAAES,aAAa,CAACQ,KAAD,CAAf,CAAT;AACD;AAEJ;AAED,OAAO,UAAUI,iBAAV,GAA6B;AAChC,QAAMtB,UAAU,CAACI,eAAe,CAACmB,mBAAjB,EAAsCJ,gBAAtC,CAAhB;AACH;AAWD,OAAO,UAAUK,gBAAV,CAA4B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA5B,EAAyD;AAC3D;AACD,MAAG;AAEF,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMf,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMhB,mBAAmB,CAACS,IAAD,CAAzB;AAEA,GALD,CAKC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT,CADS,CAET;AACD;AAEF;AACJ;AAED,OAAO,UAAUW,gBAAV,GAA6B;AAChC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,kBAAjB,EAAqCN,gBAArC,CAAhB;AACH;AAMD,OAAO,UAAUO,mBAAV,GAA+B;AAClC,QAAMC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;;AACA,MAAI;AACA,UAAMrB,QAAQ,GAAGJ,cAAc,EAA/B,CADA,CACkC;;AAClC,QAAG,CAACI,QAAJ,EAAc,OAFd,CAEqB;;AACrB,UAAMD,mBAAmB,CAACC,QAAD,CAAzB,CAHA,CAGoC;AAGvC,GAND,CAMC,OAAMM,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUgB,gBAAV,GAA6B;AAChC,QAAMlC,UAAU,CAACI,eAAe,CAAC+B,kBAAjB,EAAqCJ,mBAArC,CAAhB;AACH;AAYD,OAAO,UAAUK,SAAV,GAAqB;AACxB,QAAMjC,GAAG,CAAC,CACND,IAAI,CAACoB,iBAAD,CADE,EAENpB,IAAI,CAAC2B,gBAAD,CAFE,EAGN3B,IAAI,CAACgC,gBAAD,CAHE,CAAD,CAAT;AAOH","sourcesContent":["import {takeLatest, put, call, all} from \"redux-saga/effects\"\r\n\r\nimport { userActionTypes} from \"./user.types\"\r\n\r\nimport {auth, googleprovider, createUserProfileDocument, getCurretnUser} from \"../../firebase/firebase.utils\"\r\n\r\nimport {SignInSuccess, SignInFailure} from \"./users.actions\"\r\n\r\n//import {googleSignInStart, emailSignInStart} from \"./users.actions\"\r\n\r\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\r\n\r\n//using this reuseable function bcz both email and google sign in get the same user object.\r\nexport function *getSnapshotFromAuth(userAuth){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth)\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(SignInSuccess({ id : userSnapshot.id, ...userSnapshot.data()}))\r\n \r\n \r\n     }catch(error){\r\n       yield put (SignInFailure(error))\r\n     }\r\n    }\r\n\r\nexport function* googleSignInAsyc(){\r\n    //yield console.log(\"hello\")\r\n\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleprovider) //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\r\n       // console.log(userRef) this userRef is the same userAuth object we were in App.js\r\n       //de structuring the user property off the obj returned by the aboove method and storing it in user var.\r\n    yield getSnapshotFromAuth(user)\r\n    }catch(error){\r\n      yield put (SignInFailure(error))\r\n    }\r\n\r\n}\r\n\r\nexport function *googleSignInStart(){\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function* emailSignInAsync( {payload: {email, password}}){\r\n     //console.log(\"ballle mundya\")\r\n    try{\r\n\r\n     const {user} = yield auth.signInWithEmailAndPassword(email, password)\r\n     yield getSnapshotFromAuth(user)\r\n     \r\n    }catch(error){\r\n        yield put(SignInFailure(error))\r\n        //yield console.log(error.message)\r\n       // yield console.log(password)\r\n\r\n    }\r\n}\r\n\r\nexport function *emailSignInStart (){\r\n    yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function *isUserAuthenticated(){\r\n    yield console.log(\"gdfjgdfc\")\r\n    try {\r\n        const userAuth = getCurretnUser() //this fx will return us the same user obj as other aysnc fx\r\n        if(!userAuth) return //if no user obj received, then return the fx \r\n        yield getSnapshotFromAuth(userAuth) //otherwise pass the obj to above fx and it will make trigger the sign in success action.\r\n\r\n\r\n    }catch(error){\r\n        yield put(SignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function *checkUserSession (){\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function *userSagas(){\r\n    yield all([\r\n        call(googleSignInStart),\r\n        call(emailSignInStart),\r\n        call(checkUserSession)\r\n               \r\n          \r\n    ])\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}