{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simra\\\\Desktop\\\\gta-products-2\\\\src\\\\components\\\\sign-up\\\\sign-up.component.jsx\";\nimport React, { useState } from \"react\";\nimport \"./sign-up.styles.scss\";\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\"; //import {auth, createUserProfileDocument } from \"../../firebase/firebase.utils\" \n\nimport { signUpStart } from \"../../redux/user/users.actions\";\nimport { connect } from \"react-redux\";\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const [userCredentials, setCredentials] = setState({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phoneNumber: \"\"\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword,\n    phoneNumber\n  } = userCredentials;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"passwords don't match\");\n      return;\n    }\n\n    signUpStart({\n      email,\n      password,\n      displayName\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Don't have an account yet ?\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Sign up for new account.\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"displayName\",\n    value: displayName,\n    type: \"text\",\n    handleChange: handleChange,\n    autoComplete: \"on\",\n    label: \"Full Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    value: email,\n    type: \"email\",\n    handleChange: handleChange,\n    autoComplete: \"on\",\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    autoComplete: \"off\",\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    type: \"password\",\n    handleChange: handleChange,\n    autoComplete: \"on\",\n    label: \"Confirm Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"phoneNumber\",\n    value: phoneNumber,\n    type: \"phone\",\n    handleChange: handleChange,\n    autoComplete: \"on\",\n    label: \"Mobile Number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, \"SIGN UP\")))); //used onClick mehtod to call signinwithgoogle fx from other folder\n}; //used </CustomButton> bcz wanna use the children prop of that in custom button comp.\n//so by default isgooglesignin will pass the true value to the custom button\n\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);\n/*\r\n    try{\r\n\r\n       const {user} = await auth.createUserWithEmailAndPassword(email,password)  //hover over to see fx\r\n\r\n       await createUserProfileDocu.ment(user, {displayName})   //we are creating a new user in the db\r\n\r\n       this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n\r\n    }*/","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","FormInput","CustomButton","signUpStart","connect","SignUp","userCredentials","setCredentials","setState","displayName","email","password","confirmPassword","phoneNumber","handleSubmit","event","preventDefault","alert","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport \"./sign-up.styles.scss\"\r\nimport FormInput from \"../form-input/form-input.component\"\r\nimport CustomButton from \"../custom-button/custom-button.component\"\r\n//import {auth, createUserProfileDocument } from \"../../firebase/firebase.utils\" \r\nimport {signUpStart} from \"../../redux/user/users.actions\"\r\n\r\nimport {connect} from \"react-redux\"\r\n\r\n\r\n\r\nconst SignUp = ({signUpStart}) => {\r\n    const [userCredentials , setCredentials] = setState({displayName: \"\",email: \"\", password: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n\r\n    const {displayName,email, password, confirmPassword, phoneNumber} = userCredentials\r\n    const handleSubmit = event => { \r\n        event.preventDefault()\r\n        if (password !== confirmPassword){\r\n        alert(\"passwords don't match\")\r\n        \r\n        return\r\n    }\r\n    signUpStart({email, password, displayName})\r\n    \r\n        \r\n     }\r\n\r\n    const handleChange = event => {\r\n         const {value, name} = event.target\r\n         setCredentials({...userCredentials, [name]: value})\r\n     }\r\n     \r\n     \r\n        return (\r\n            <div className = \"sign-up\">\r\n                <h2 className= \"title\">Don't have an account yet ?</h2>\r\n                <span>Sign up for new account.</span>\r\n\r\n                <form onSubmit = {handleSubmit}>\r\n                <FormInput name = \"displayName\"\r\n                     value ={displayName} \r\n                     type=\"text\" \r\n                     handleChange = {handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Full Name'\r\n                      required />\r\n\r\n                    <FormInput name = \"email\"\r\n                     value ={email} \r\n                     type=\"email\" \r\n                     handleChange = {handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Email'\r\n                      required />\r\n                    \r\n\r\n\r\n                    <FormInput type=\"password\"\r\n                     name = \"password\" \r\n                     value = {password} \r\n                     autoComplete = \"off\"\r\n                     handleChange = {handleChange}\r\n                     label = \"Password\"\r\n                      required />\r\n\r\n                      <FormInput name = \"confirmPassword\"\r\n                     value ={confirmPassword} \r\n                     type=\"password\" \r\n                     handleChange = {handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Confirm Password'\r\n                      required />\r\n\r\n                      <FormInput name = \"phoneNumber\"\r\n                     value ={phoneNumber} \r\n                     type=\"phone\" \r\n                     handleChange = {handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Mobile Number'\r\n                       />\r\n    \r\n                    <div className = \"buttons\">\r\n                    <CustomButton type=\"submit\" >SIGN UP\r\n                        </CustomButton>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )//used onClick mehtod to call signinwithgoogle fx from other folder\r\n    }  //used </CustomButton> bcz wanna use the children prop of that in custom button comp.\r\n //so by default isgooglesignin will pass the true value to the custom button\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signUpStart : (userCredentials) => dispatch(signUpStart(userCredentials))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp)\r\n\r\n/*\r\n    try{\r\n\r\n       const {user} = await auth.createUserWithEmailAndPassword(email,password)  //hover over to see fx\r\n\r\n       await createUserProfileDocu.ment(user, {displayName})   //we are creating a new user in the db\r\n\r\n       this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n\r\n    }*/\r\n        "]},"metadata":{},"sourceType":"module"}