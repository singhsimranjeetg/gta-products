{"ast":null,"code":"import { shopActionTypes } from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\nexport const fetchCollectionsStart = () => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMsg => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMsg\n}); //console.log(collecctionRef)\n\n/* using REST API to access data \r\nfetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\nthis.setState({loading : false}) //this will give us an error because collections is null.*/\n//using the promises pattern\n\n/* observable pattern \r\ncollecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n//console.log(snapshot)\r\nconst collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n//console.log(collectionsMap)\r\nupdateCollections(collectionsMap)  //selector method to send the new state to redux\r\nthis.setState({loading : false})\r\n} )  */","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/shop/shop.actions.js"],"names":["shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","dispatch","collectionRef","collection","fetchCollectionsStart","get","then","snapshot","collectionsMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","type","FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","payload","errorMsg","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA0D,+BAA1D;AAEA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACG,qBAAqB,EAAtB,CAAR;AAEAF,IAAAA,aAAa,CACVG,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMC,cAAc,GAAGT,+BAA+B,CAACQ,QAAD,CAAtD;AACAN,MAAAA,QAAQ,CAACQ,uBAAuB,CAACD,cAAD,CAAxB,CAAR;AACD,KALH,EAMGE,KANH,CAMSC,KAAK,IAAIV,QAAQ,CAACW,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN1B;AAOD,GAXD;AAYD,CAbI;AAeP,OAAO,MAAMT,qBAAqB,GAAG,OAAO;AACxCU,EAAAA,IAAI,EAAEjB,eAAe,CAACkB;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMN,uBAAuB,GAAID,cAAD,KAAqB;AACxDM,EAAAA,IAAI,EAAEjB,eAAe,CAACmB,yBADkC;AAExDC,EAAAA,OAAO,EAAET;AAF+C,CAArB,CAAhC;AAMP,OAAO,MAAMI,uBAAuB,GAAGM,QAAQ,KAAK;AAChDJ,EAAAA,IAAI,EAAEjB,eAAe,CAACsB,yBAD0B;AAEhDF,EAAAA,OAAO,EAAEC;AAFuC,CAAL,CAAxC,C,CAYN;;AACE;;;AAIE;;AAIG","sourcesContent":["import {shopActionTypes} from \"./shop.types\"\r\nimport  {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\"\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collections');\r\n      dispatch(fetchCollectionsStart());\r\n  \r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_START\r\n})\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n})\r\n\r\n\r\nexport const fetchCollectionsFailure = errorMsg => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMsg\r\n})\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n //console.log(collecctionRef)\r\n   /* using REST API to access data \r\n   fetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\n   this.setState({loading : false}) //this will give us an error because collections is null.*/\r\n\r\n     //using the promises pattern\r\n\r\n\r\n\r\n        /* observable pattern \r\n     collecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n        //console.log(snapshot)\r\n      const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n      //console.log(collectionsMap)\r\n      updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n      this.setState({loading : false})\r\n     } )  */ \r\n"]},"metadata":{},"sourceType":"module"}