{"ast":null,"code":"import { takeEvery, call, put } from \"redux-saga/effects\"; //listens for every action of specific type\n\nimport { shopActionTypes } from \"./shop.types\"; //import { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\"\n//import { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"heloobgooo\");\n}\n/*\r\n    try {\r\n    const  collectionRef = firestore.collection(\"collections\")\r\n    const snapshot = yield collectionRef.get()\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \r\n    yield put(fetchCollectionsSuccess(fetchCollectionsSuccess(collectionsMap)))\r\n    }\r\n    catch(error){\r\n        yield put(fetchCollectionsFailure(error.message)) //dispatches an object\r\n\r\n    }\r\n}*/\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","put","shopActionTypes","fetchCollectionsAsync","console","log","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC,C,CAA4D;;AAC5D,SAAQC,eAAR,QAA8B,cAA9B,C,CACA;AACA;;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAgC;AACnC;;;;;;;;;;;;;AAaA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMP,SAAS,CACXG,eAAe,CAACK,uBADL,EAEXJ,qBAFW,CAAf;AAGH","sourcesContent":["import {takeEvery, call, put} from \"redux-saga/effects\"     //listens for every action of specific type\r\nimport {shopActionTypes} from \"./shop.types\"\r\n//import { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\"\r\n//import { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   yield console.log(\"heloobgooo\")}\r\n/*\r\n    try {\r\n    const  collectionRef = firestore.collection(\"collections\")\r\n    const snapshot = yield collectionRef.get()\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \r\n    yield put(fetchCollectionsSuccess(fetchCollectionsSuccess(collectionsMap)))\r\n    }\r\n    catch(error){\r\n        yield put(fetchCollectionsFailure(error.message)) //dispatches an object\r\n\r\n    }\r\n}*/\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        shopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync)\r\n}"]},"metadata":{},"sourceType":"module"}