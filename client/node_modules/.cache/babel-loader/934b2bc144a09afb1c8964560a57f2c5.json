{"ast":null,"code":"import { userActionTypes } from \"./user.types\";\nconst INITIAL_STATE = {\n  currentUser: null\n}; //NOTE: each reducer get the action we ever get fired, even though its not related\n//to that reducer. so in this case we will return a defualt value of state, which will \n//get the comp not to render which is related to this state.\n//whenever an action gets fired, we have two prop, one is the type which is unique and other is the payload,\n//that is similar to the props(contains some value)\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case userActionTypes.SET_CURRENT_USER:\n      //if ever the set current user action gets fired \n      return { ...state,\n        currentUser: action.payload\n      };\n\n    default:\n      return state;\n    //we none of the action type matches the current action, we will return the current state \n    //and this will not make the component to re render.\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/user/user-reducer.js"],"names":["userActionTypes","INITIAL_STATE","currentUser","userReducer","state","action","type","SET_CURRENT_USER","payload"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE;AADK,CAAtB,C,CAIA;AACA;AACA;AAEA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,eAAe,CAACO,gBAArB;AAA0C;AACxC,aAAM,EACF,GAAGH,KADD;AAEFF,QAAAA,WAAW,EAAEG,MAAM,CAACG;AAFlB,OAAN;;AAKF;AACI,aAAOJ,KAAP;AAAe;AACf;AATR;AAaH,CAdD;;AAgBA,eAAeD,WAAf","sourcesContent":["import {userActionTypes} from \"./user.types\"\r\n\r\nconst INITIAL_STATE = {\r\n    currentUser: null\r\n}\r\n\r\n//NOTE: each reducer get the action we ever get fired, even though its not related\r\n//to that reducer. so in this case we will return a defualt value of state, which will \r\n//get the comp not to render which is related to this state.\r\n\r\n//whenever an action gets fired, we have two prop, one is the type which is unique and other is the payload,\r\n//that is similar to the props(contains some value)\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case userActionTypes.SET_CURRENT_USER:    //if ever the set current user action gets fired \r\n          return{\r\n              ...state,\r\n              currentUser: action.payload\r\n          }\r\n    \r\n        default:\r\n            return state   //we none of the action type matches the current action, we will return the current state \r\n            //and this will not make the component to re render.\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default userReducer"]},"metadata":{},"sourceType":"module"}