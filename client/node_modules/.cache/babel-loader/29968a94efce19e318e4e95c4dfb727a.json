{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { userActionTypes } from \"./user.types\";\nimport { auth, googleprovider, createUserProfileDocument, getCurretnUser } from \"../../firebase/firebase.utils\";\nimport { SignInSuccess, SignInFailure, signOutFailure, signOutSuccess, SignUpFailure, SignUpSuccess } from \"./users.actions\"; //import {googleSignInStart, emailSignInStart} from \"./users.actions\"\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\n//using this reuseable function bcz both email and google sign in get the same user object.\n//REUSEABLE FUNCTION TO USE FOR LOGIN\n\nexport function* getSnapshotFromAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth); //this fx return the userRef, the document of the user trying to login\n\n    const userSnapshot = yield userRef.get(); // console.log(userSnapshot.data())  this will contain the details of collection of that user ex. displ name, created at \n\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n} //GOOGLE LOGIN SAGA\n\nexport function* googleSignInAsyc() {\n  //yield console.log(\"hello\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleprovider); //console.log(user) //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\n    // console.log(userRef) this userRef is the same userAuth object we were in App.js\n    //de structuring the user property off the obj returned by the aboove method and storing it in user var.\n\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* googleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc);\n} //EMAIL LOGIN SAGA \n\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  //console.log(\"ballle mundya\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error)); //yield console.log(error.message)\n    // yield console.log(password)\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync);\n} //USER PERSISTENCE SAGA\n\nexport function* isUserAuthenticated() {\n  //yield console.log(\"gdfjgdfc\")\n  try {\n    const userAuth = yield getCurretnUser(); //this fx will return us the same user obj as other aysnc fx\n\n    if (!userAuth) return; //if no user obj received, then return the fx \n\n    yield getSnapshotFromAuth(userAuth); //otherwise pass the obj to above fx and it will make trigger the sign in success action.\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* checkUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} //SIGN OUT SAGA\n\nfunction* signOutAsync() {\n  // yield console.log(\"good\")\n  try {\n    yield auth.signOut(); //this method is to sign out the user from forebase and deletes the sessions.\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nfunction* signOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOutAsync);\n} //SIGN UP SAGA\n\n\nfunction* signUpAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  //yield console.log(\"hekk\")\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); //hover over to see fx\n\n    yield createUserProfileDocument(user, email); //we are creating a new user in the db\n\n    yield put(SignUpSuccess());\n    yield console.log(user); //this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\n  } catch (error) {\n    yield put(SignUpFailure(error));\n    yield console.log(error);\n  }\n}\n\nfunction* signUpStart() {\n  yield takeLatest(userActionTypes.SIGNUP_START, signUpAsync);\n}\n\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(checkUserSession), call(signOutStart), call(signUpStart)]);\n}","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","userActionTypes","auth","googleprovider","createUserProfileDocument","getCurretnUser","SignInSuccess","SignInFailure","signOutFailure","signOutSuccess","SignUpFailure","SignUpSuccess","getSnapshotFromAuth","userAuth","userRef","userSnapshot","get","id","data","error","googleSignInAsyc","user","signInWithPopup","googleSignInStart","GOOGLE_SIGNIN_START","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGNIN_START","isUserAuthenticated","checkUserSession","CHECK_USER_SESSION","signOutAsync","signOut","signOutStart","SIGN_OUT_START","signUpAsync","createUserWithEmailAndPassword","console","log","signUpStart","SIGNUP_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, call, all} from \"redux-saga/effects\"\r\n\r\nimport { userActionTypes} from \"./user.types\"\r\n\r\nimport {auth, googleprovider, createUserProfileDocument, getCurretnUser} from \"../../firebase/firebase.utils\"\r\n\r\nimport {SignInSuccess, SignInFailure, signOutFailure, signOutSuccess, SignUpFailure, SignUpSuccess} from \"./users.actions\"\r\n\r\n//import {googleSignInStart, emailSignInStart} from \"./users.actions\"\r\n\r\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\r\n\r\n//using this reuseable function bcz both email and google sign in get the same user object.\r\n\r\n\r\n\r\n//REUSEABLE FUNCTION TO USE FOR LOGIN\r\nexport function *getSnapshotFromAuth(userAuth){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth) //this fx return the userRef, the document of the user trying to login\r\n        const userSnapshot = yield userRef.get()\r\n       // console.log(userSnapshot.data())  this will contain the details of collection of that user ex. displ name, created at \r\n        yield put(SignInSuccess({ id : userSnapshot.id, ...userSnapshot.data()}))\r\n \r\n \r\n     }catch(error){\r\n       yield put (SignInFailure(error))\r\n     }\r\n    }\r\n\r\n\r\n\r\n\r\n//GOOGLE LOGIN SAGA\r\nexport function* googleSignInAsyc(){\r\n    //yield console.log(\"hello\")\r\n\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleprovider)\r\n        //console.log(user) //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\r\n       // console.log(userRef) this userRef is the same userAuth object we were in App.js\r\n       //de structuring the user property off the obj returned by the aboove method and storing it in user var.\r\n    yield getSnapshotFromAuth(user)\r\n    }catch(error){\r\n      yield put (SignInFailure(error))\r\n    }\r\n\r\n}\r\n\r\nexport function *googleSignInStart(){\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//EMAIL LOGIN SAGA \r\nexport function* emailSignInAsync( {payload: {email, password}}){\r\n     //console.log(\"ballle mundya\")\r\n    try{\r\n\r\n     const {user} = yield auth.signInWithEmailAndPassword(email, password)\r\n     yield getSnapshotFromAuth(user)\r\n     \r\n    }catch(error){\r\n        yield put(SignInFailure(error))\r\n        //yield console.log(error.message)\r\n       // yield console.log(password)\r\n\r\n    }\r\n}\r\n\r\nexport function *emailSignInStart (){\r\n    yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync)\r\n}\r\n\r\n\r\n\r\n\r\n//USER PERSISTENCE SAGA\r\nexport function *isUserAuthenticated(){\r\n    //yield console.log(\"gdfjgdfc\")\r\n    try {\r\n        const userAuth = yield getCurretnUser() //this fx will return us the same user obj as other aysnc fx\r\n        if(!userAuth) return //if no user obj received, then return the fx \r\n        yield getSnapshotFromAuth(userAuth) //otherwise pass the obj to above fx and it will make trigger the sign in success action.\r\n\r\n\r\n    }catch(error){\r\n        yield put(SignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function *checkUserSession (){\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\n\r\n\r\n//SIGN OUT SAGA\r\n\r\nfunction *signOutAsync(){\r\n   // yield console.log(\"good\")\r\n   try{\r\n    yield auth.signOut() //this method is to sign out the user from forebase and deletes the sessions.\r\n     yield put(signOutSuccess())\r\n   }catch(error){\r\n       yield put(signOutFailure(error))\r\n   }\r\n}\r\n\r\nfunction *signOutStart(){\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOutAsync)\r\n}\r\n\r\n\r\n\r\n//SIGN UP SAGA\r\n\r\nfunction *signUpAsync({payload: {email, password}}){\r\n    //yield console.log(\"hekk\")\r\n    try{\r\n\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email,password)  //hover over to see fx\r\n \r\n        yield createUserProfileDocument(user, email)  //we are creating a new user in the db\r\n        yield put(SignUpSuccess())\r\n        yield console.log(user)\r\n        \r\n        //this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n \r\n     }\r\n     catch(error){\r\n         yield put(SignUpFailure(error))\r\n         yield console.log(error)\r\n \r\n     }\r\n}\r\n\r\nfunction *signUpStart(){\r\n    yield takeLatest(userActionTypes.SIGNUP_START, signUpAsync)\r\n}\r\n\r\n\r\n\r\nexport function *userSagas(){\r\n    yield all([\r\n        call(googleSignInStart),\r\n        call(emailSignInStart),\r\n        call(checkUserSession),\r\n        call(signOutStart),\r\n        call(signUpStart)\r\n               \r\n          \r\n    ])\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}