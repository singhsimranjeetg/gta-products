{"ast":null,"code":"import { shopActionTypes } from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n/*\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collections');\r\n      dispatch(fetchCollectionsStart()); //we are firing the function/action here\r\n  \r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap)); //value of collectionMap would be passed to action as payload.\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_START\r\n})\r\n*/\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMsg => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMsg\n}); //console.log(collecctionRef)\n\n/* using REST API to access data \r\nfetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\nthis.setState({loading : false}) //this will give us an error because collections is null.*/\n//using the promises pattern\n\n/* observable pattern \r\ncollecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n//console.log(snapshot)\r\nconst collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n//console.log(collectionsMap)\r\nupdateCollections(collectionsMap)  //selector method to send the new state to redux\r\nthis.setState({loading : false})\r\n} )  */","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/shop/shop.actions.js"],"names":["shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","collectionsMap","type","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMsg","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA0D,+BAA1D;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,KAAqB;AACxDC,EAAAA,IAAI,EAAEL,eAAe,CAACM,yBADkC;AAExDC,EAAAA,OAAO,EAAEH;AAF+C,CAArB,CAAhC;AAMP,OAAO,MAAMI,uBAAuB,GAAGC,QAAQ,KAAK;AAChDJ,EAAAA,IAAI,EAAEL,eAAe,CAACU,yBAD0B;AAEhDH,EAAAA,OAAO,EAAEE;AAFuC,CAAL,CAAxC,C,CAYN;;AACE;;;AAIE;;AAIG","sourcesContent":["import {shopActionTypes} from \"./shop.types\"\r\nimport  {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\"\r\n/*\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collections');\r\n      dispatch(fetchCollectionsStart()); //we are firing the function/action here\r\n  \r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap)); //value of collectionMap would be passed to action as payload.\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_START\r\n})\r\n*/\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n})\r\n\r\n\r\nexport const fetchCollectionsFailure = errorMsg => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMsg\r\n})\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n //console.log(collecctionRef)\r\n   /* using REST API to access data \r\n   fetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\n   this.setState({loading : false}) //this will give us an error because collections is null.*/\r\n\r\n     //using the promises pattern\r\n\r\n\r\n\r\n        /* observable pattern \r\n     collecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n        //console.log(snapshot)\r\n      const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n      //console.log(collectionsMap)\r\n      updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n      this.setState({loading : false})\r\n     } )  */ \r\n"]},"metadata":{},"sourceType":"module"}