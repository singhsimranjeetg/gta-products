{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simra\\\\Desktop\\\\gta-products-2\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\n//because we gonna store data for our collection items here, \n//we need state mathod, so we are using class component here.\nimport React from \"react\";\nimport \"./shop.styles.scss\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPage1 from \"../../components/collectionPage/collectionPage.component\"; //import SearchBox from \"../../components/search/search.component\"\n\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPage1WithSpninner = WithSpinner(CollectionPage1); //class ShopPage extends React.Component{ dont need class component bcz no use of state here\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collecctionRef = firestore.collection(\"collections\"); //console.log(collecctionRef)\n\n    fetch('https://[gtaproducts-db].firebaseio.com/collections').then(response => response.json()).then(collections => console.log(collections));\n    /*\r\n    //using the promises pattern\r\n    collecctionRef.get().then(( collectionData => { //get tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n     //console.log(snapshot)\r\n    const collectionsMap =  convertCollectionsSnapshotToMap(collectionData)\r\n    //console.log(collectionsMap)\r\n    updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n    this.setState({loading : false})\r\n    } ))*/\n\n    /* observable pattern \r\n      collecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n         //console.log(snapshot)\r\n       const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n       //console.log(collectionsMap)\r\n       updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n       this.setState({loading : false})\r\n      } )  */\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: this.state.loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:categoryId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPage1WithSpninner, Object.assign({\n        isLoading: this.state.loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/pages/shop/shop.component.jsx"],"names":["React","CollectionsOverview","Route","CollectionPage1","firestore","convertCollectionsSnapshotToMap","connect","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","CollectionPage1WithSpninner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collecctionRef","collection","fetch","then","response","json","collections","console","log","render","match","path","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,eAAP,MAA4B,0DAA5B,C,CACA;;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAGA,MAAMC,8BAA8B,GAAGD,WAAW,CAACP,mBAAD,CAAlD;AACA,MAAMS,2BAA2B,GAAGF,WAAW,CAACL,eAAD,CAA/C,C,CAKA;;AACA,MAAMQ,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACLC,MAAAA,OAAO,EAAG;AADL,KAD4B;AAAA,SAKrCC,uBALqC,GAKX,IALW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAE;AAChB,UAAM;AAACT,MAAAA;AAAD,QAAsB,KAAKU,KAAjC;AACA,UAAMC,cAAc,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAvB,CAFgB,CAGhB;;AAEFC,IAAAA,KAAK,CAAC,qDAAD,CAAL,CAA6DC,IAA7D,CAAkEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA9E,EAA+FF,IAA/F,CAAoGG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAAnH;AAGE;;;;;;;;;;AAaF;;;;;;;;AAQA;;AACAG,EAAAA,MAAM,GAAI;AACN,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKX,KAArB;AAED,wBACG;AAAK,MAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAK,GAAEW,KAAK,CAACC,IAAK,EAAnC;AAAsC,MAAA,MAAM,EAAKZ,KAAD,iBAC5C,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAI,KAAKJ,KAAL,CAAWC;AAAxD,SAAqEG,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,eAGG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAK,GAAEW,KAAK,CAACC,IAAK,cAA7B;AAA4C,MAAA,MAAM,EAAKZ,KAAD,iBAClD,oBAAC,2BAAD;AAA6B,QAAA,SAAS,EAAI,KAAKJ,KAAL,CAAWC;AAArD,SAAkEG,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CADH;AAOF;;AA/CmC;;AAmDvC,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACrCxB,EAAAA,iBAAiB,EAAGyB,cAAc,IAAID,QAAQ,CAACxB,iBAAiB,CAACyB,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIC,eAAe1B,OAAO,CAAC,IAAD,EAAOwB,kBAAP,CAAP,CAAmCnB,QAAnC,CAAf","sourcesContent":["//because we gonna store data for our collection items here, \r\n//we need state mathod, so we are using class component here.\r\n\r\nimport React from \"react\"\r\nimport \"./shop.styles.scss\"\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\"\r\nimport { Route } from \"react-router-dom\"\r\nimport CollectionPage1 from \"../../components/collectionPage/collectionPage.component\"\r\n//import SearchBox from \"../../components/search/search.component\"\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\"\r\nimport {connect} from \"react-redux\"\r\nimport {updateCollections} from \"../../redux/shop/shop.actions\"\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\"\r\n\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\r\nconst CollectionPage1WithSpninner = WithSpinner(CollectionPage1)\r\n\r\n\r\n\r\n\r\n//class ShopPage extends React.Component{ dont need class component bcz no use of state here\r\nclass ShopPage extends React.Component {\r\n   state = {\r\n      loading : true\r\n   }\r\n \r\n  unsubscribeFromSnapshot = null;\r\n\r\n  componentDidMount(){\r\n     const {updateCollections} = this.props\r\n     const collecctionRef = firestore.collection(\"collections\")\r\n     //console.log(collecctionRef)\r\n    \r\n   fetch('https://[gtaproducts-db].firebaseio.com/collections').then(response => response.json()).then(collections => console.log(collections))\r\n\r\n\r\n     /*\r\n     //using the promises pattern\r\n\r\n   collecctionRef.get().then(( collectionData => { //get tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n      //console.log(snapshot)\r\n    const collectionsMap =  convertCollectionsSnapshotToMap(collectionData)\r\n    //console.log(collectionsMap)\r\n    updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n    this.setState({loading : false})\r\n   } ))*/\r\n\r\n\r\n\r\n   /* observable pattern \r\n     collecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n        //console.log(snapshot)\r\n      const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n      //console.log(collectionsMap)\r\n      updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n      this.setState({loading : false})\r\n     } )  */   \r\n  }\r\n   render () {\r\n       const {match} = this.props\r\n\r\n      return(     \r\n         <div className = \"shop-page\">\r\n            <Route exact path = {`${match.path}`} render = {(props) => (\r\n                <CollectionsOverviewWithSpinner isLoading = {this.state.loading} {...props} />)} />\r\n            <Route path = {`${match.path}/:categoryId`} render = {(props) => (\r\n                <CollectionPage1WithSpninner isLoading = {this.state.loading} {...props} /> )}/>      \r\n         </div> )\r\n   }\r\n\r\n} \r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   updateCollections : collectionsMap => dispatch(updateCollections(collectionsMap))\r\n})\r\n\r\n export default connect(null, mapDispatchToProps) (ShopPage)\r\n"]},"metadata":{},"sourceType":"module"}