{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\"; //listens for every action of specific type\n\nimport { shopActionTypes } from \"./shop.types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nexport function* fetchCollectionsAsync() {\n  //  yield console.log(\"heloobgooo\")}\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get(); //this is raw data retrived from our db\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message)); //dispatches an object\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/client/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","shopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","convertCollectionsSnapshotToMap","firestore","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC,C,CAA6D;;AAC7D,SAAQC,eAAR,QAA8B,cAA9B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AACA,SAASC,+BAAT,EAA0CC,SAA1C,QAA2D,+BAA3D;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACvC;AAEG,MAAI;AACJ,UAAOC,aAAa,GAAGF,SAAS,CAACG,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFI,CAEuC;;AAC3C,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACK,+BAAD,EAAkCK,QAAlC,CAAjC,CAHI,CAGyE;;AAC7E,UAAMT,GAAG,CAACE,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACC,GALD,CAMA,OAAMC,KAAN,EAAY;AACR,UAAMZ,GAAG,CAACG,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT,CADQ,CAC0C;AAErD;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,UAAU,CACZG,eAAe,CAACc,uBADJ,EAEZT,qBAFY,CAAhB;AAGH","sourcesContent":["import {takeLatest, call, put} from \"redux-saga/effects\"     //listens for every action of specific type\r\nimport {shopActionTypes} from \"./shop.types\"\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\"\r\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"\r\n\r\nexport function* fetchCollectionsAsync(){\r\n //  yield console.log(\"heloobgooo\")}\r\n\r\n    try {\r\n    const  collectionRef = firestore.collection(\"collections\")\r\n    const snapshot = yield collectionRef.get() //this is raw data retrived from our db\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \r\n    yield put(fetchCollectionsSuccess(collectionsMap))\r\n    }\r\n    catch(error){\r\n        yield put(fetchCollectionsFailure(error.message)) //dispatches an object\r\n\r\n    }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest(\r\n        shopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync)\r\n}"]},"metadata":{},"sourceType":"module"}