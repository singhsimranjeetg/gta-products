{"ast":null,"code":"/*import {takeEvery, call, put} from \"redux-saga/effects\"     //listens for every action of specific type\r\nimport {shopActionTypes} from \"./shop.types\"\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\"\r\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   // yield console.log(\"heloobgooo\")\r\n\r\n    try {\r\n    const  collectionRef = firestore.collection(\"collections\")\r\n    const snapshot = yield collectionRef.get()\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \r\n    yield put(fetchCollectionsSuccess(fetchCollectionsSuccess(collectionsMap)))\r\n    }\r\n    catch(error){\r\n        yield put(fetchCollectionsFailure(error.message)) //dispatches an object\r\n\r\n    }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        shopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync)\r\n}*/","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/shop/shop.saga.js"],"names":[],"mappings":"AAAA","sourcesContent":["/*import {takeEvery, call, put} from \"redux-saga/effects\"     //listens for every action of specific type\r\nimport {shopActionTypes} from \"./shop.types\"\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\"\r\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   // yield console.log(\"heloobgooo\")\r\n\r\n    try {\r\n    const  collectionRef = firestore.collection(\"collections\")\r\n    const snapshot = yield collectionRef.get()\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) //effect that takes 1st arguement as function and subs are the paramerters we wanna pass \r\n    yield put(fetchCollectionsSuccess(fetchCollectionsSuccess(collectionsMap)))\r\n    }\r\n    catch(error){\r\n        yield put(fetchCollectionsFailure(error.message)) //dispatches an object\r\n\r\n    }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        shopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync)\r\n}*/"]},"metadata":{},"sourceType":"module"}