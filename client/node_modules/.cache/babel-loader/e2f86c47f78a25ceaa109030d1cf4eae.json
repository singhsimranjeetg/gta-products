{"ast":null,"code":"//pulling in the firebase utility library which belong from this file\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //for database\n\nimport \"firebase/auth\"; //for authentication\n\nconst config = {\n  apiKey: \"AIzaSyBMbCbyYNs274zYWIgqIMQjX0SCUJdCG3w\",\n  authDomain: \"gtaproducts-db.firebaseapp.com\",\n  databaseURL: \"https://gtaproducts-db.firebaseio.com\",\n  projectId: \"gtaproducts-db\",\n  storageBucket: \"gtaproducts-db.appspot.com\",\n  messagingSenderId: \"720816448904\",\n  appId: \"1:720816448904:web:fda3534eefb30ac139063d\",\n  measurementId: \"G-2BWRJX5PFW\"\n};\nfirebase.initializeApp(config); //initializing the config app\n//creating new user in db start\n//fx to get the users obj from the auth and store it in db's users collection\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //return null if user is sign out bcz null is passed form app.js \n  //userAuth is the firebase data from our authentication optins\n  // const userRef = firestore.doc(\"/users/HkgewdKW2RNmcchEm9Uq\") returns true for bcz this doc exists in the users collection\n  //executes this if user is sign in \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //console.log(userRef) //this userref return an object with db doc id and few other prop of that doc.\n\n  const snapShot = await userRef.get(); //console.log(snapShot) //this snapshot returns almost same db object with exists boolean prop\n  //the exists prop returns true if there is already a doc with same uid in the user collectionn\n  //the exists prop return false if there is no doc in db with same id that got generated in auth \n\n  if (!snapShot.exists) {\n    //in order to get see data, we have to use .data() mathod on snapshot\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create a new user obj in db if not already exists \n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(\"error creating a new user\", err.message);\n    }\n  }\n\n  return userRef;\n}; //creating new user in db finished\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionKey);\n};\nexport const auth = firebase.auth(); //exporting the auth with auth variable\n\nexport const firestore = firebase.firestore(); //exporting the db \n//setting up google authentication utility\n//give access to googleauth class from the auth library\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); //export the var that use auth method form firebase and use the signineithPopup with provider that is google in this case\n\nexport const SignInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AAGxB,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWET,QAAQ,CAACU,aAAT,CAAuBT,MAAvB,E,CAAiC;AACjC;AAEA;;AACF,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAG,CAACD,QAAJ,EAAc,OAD2D,CACpD;AACrB;AACD;AAGA;;AACC,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAPyE,CAQzE;;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAVyE,CAWzE;AACA;AACA;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AAAK;AACtB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AAAuB;AACvB,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAQA,OAAMa,GAAN,EAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAG,CAACG,OAA7C;AACH;AACJ;;AACD,SAAOf,OAAP;AACH,CAhCM,C,CAiCP;;AAEC,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ;AACD,CAHM;AAQN,OAAO,MAAMI,IAAI,GAAGnC,QAAQ,CAACmC,IAAT,EAAb,C,CAA6B;;AACpC,OAAO,MAAMpB,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB,C,CAAyC;AAEhD;AACF;;AACE,MAAMqB,QAAQ,GAAG,IAAIpC,QAAQ,CAACmC,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B,E,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAepC,QAAf","sourcesContent":["//pulling in the firebase utility library which belong from this file\r\nimport firebase from \"firebase/app\";   \r\nimport \"firebase/firestore\"; //for database\r\nimport \"firebase/auth\"  //for authentication\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBMbCbyYNs274zYWIgqIMQjX0SCUJdCG3w\",\r\n    authDomain: \"gtaproducts-db.firebaseapp.com\",\r\n    databaseURL: \"https://gtaproducts-db.firebaseio.com\",\r\n    projectId: \"gtaproducts-db\",\r\n    storageBucket: \"gtaproducts-db.appspot.com\",\r\n    messagingSenderId: \"720816448904\",\r\n    appId: \"1:720816448904:web:fda3534eefb30ac139063d\",\r\n    measurementId: \"G-2BWRJX5PFW\"\r\n  }\r\n\r\n  firebase.initializeApp(config)   //initializing the config app\r\n  //creating new user in db start\r\n\r\n  //fx to get the users obj from the auth and store it in db's users collection\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if(!userAuth) return //return null if user is sign out bcz null is passed form app.js \r\n    //userAuth is the firebase data from our authentication optins\r\n   // const userRef = firestore.doc(\"/users/HkgewdKW2RNmcchEm9Uq\") returns true for bcz this doc exists in the users collection\r\n    \r\n\r\n   //executes this if user is sign in \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`) \r\n    //console.log(userRef) //this userref return an object with db doc id and few other prop of that doc.\r\n\r\n    const snapShot = await userRef.get()  \r\n    //console.log(snapShot) //this snapshot returns almost same db object with exists boolean prop\r\n    //the exists prop returns true if there is already a doc with same uid in the user collectionn\r\n    //the exists prop return false if there is no doc in db with same id that got generated in auth \r\n\r\n    if(!snapShot.exists) {    //in order to get see data, we have to use .data() mathod on snapshot\r\n        const {displayName, email} = userAuth\r\n        const createdAt = new Date()\r\n\r\n        try {                      //create a new user obj in db if not already exists \r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n                          })\r\n        }\r\n        catch(err) {\r\n            console.log(\"error creating a new user\", err.message)\r\n        }   \r\n    }\r\n    return userRef\r\n}\r\n//creating new user in db finished\r\n\r\n export const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\r\n   const collectionRef = firestore.collection(collectionKey)\r\n   console.log(collectionKey)\r\n }\r\n\r\n\r\n \r\n\r\n  export const auth = firebase.auth() //exporting the auth with auth variable\r\n  export const firestore = firebase.firestore()   //exporting the db \r\n\r\n  //setting up google authentication utility\r\n//give access to googleauth class from the auth library\r\n  const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  provider.setCustomParameters({prompt: \"select_account\"})\r\n  \r\n  //export the var that use auth method form firebase and use the signineithPopup with provider that is google in this case\r\n  export const SignInWithGoogle = () => auth.signInWithPopup(provider)\r\n\r\n  export default firebase\r\n\r\n\r\n  \r\n"]},"metadata":{},"sourceType":"module"}