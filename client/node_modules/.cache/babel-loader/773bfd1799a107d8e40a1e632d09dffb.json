{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simra\\\\Desktop\\\\gta-products-2\\\\src\\\\components\\\\sign-up\\\\sign-up.component.jsx\";\nimport React from \"react\";\nimport \"./sign-up.styles.scss\";\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\"; //import {auth, createUserProfileDocument } from \"../../firebase/firebase.utils\" \n\nimport { signUpStart } from \"../../redux/user/users.actions\";\nimport { connect } from \"react-redux\";\n\nclass SignUp extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = event => {\n      //didn't get why this method defined outside the construcotr and has obj destructuring \n      event.preventDefault();\n      const {\n        displayName,\n        email,\n        password,\n        confirmPassword\n      } = this.state;\n      const {\n        signUpStart\n      } = this.props;\n\n      if (password !== confirmPassword) {\n        alert(\"passwords don't match\");\n        signUpStart(email, password, displayName);\n        return;\n      }\n      /*\r\n      try{\r\n          const {user} = await auth.createUserWithEmailAndPassword(email,password)  //hover over to see fx\r\n          await createUserProfileDocument(user, {displayName})   //we are creating a new user in the db\r\n          this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n       }\r\n      catch(err){\r\n         console.log(err)\r\n       }*/\n\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      displayName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      phoneNumber: \"\"\n    };\n  }\n\n  render() {\n    //const {signUpStartProp} = this.props\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"Don't have an account yet ?\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"Sign up for new account.\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"displayName\",\n      value: this.state.displayName,\n      type: \"text\",\n      handleChange: this.handleChange,\n      autoComplete: \"on\",\n      label: \"Full Name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"email\",\n      value: this.state.email,\n      type: \"email\",\n      handleChange: this.handleChange,\n      autoComplete: \"on\",\n      label: \"Email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      autoComplete: \"off\",\n      handleChange: this.handleChange,\n      label: \"Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"confirmPassword\",\n      value: this.state.confirmPassword,\n      type: \"password\",\n      handleChange: this.handleChange,\n      autoComplete: \"on\",\n      label: \"Confirm Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"phoneNumber\",\n      value: this.state.phoneNumber,\n      type: \"phone\",\n      handleChange: this.handleChange,\n      autoComplete: \"on\",\n      label: \"Mobile Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, \"SIGN UP\")))); //used onClick mehtod to call signinwithgoogle fx from other folder\n  } //used </CustomButton> bcz wanna use the children prop of that in custom button comp.\n\n\n} //so by default isgooglesignin will pass the true value to the custom button\n\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (email, password) => dispatch(signUpStart(email, password))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/components/sign-up/sign-up.component.jsx"],"names":["React","FormInput","CustomButton","signUpStart","connect","SignUp","Component","constructor","handleSubmit","event","preventDefault","displayName","email","password","confirmPassword","state","props","alert","handleChange","value","name","target","setState","phoneNumber","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport \"./sign-up.styles.scss\"\r\nimport FormInput from \"../form-input/form-input.component\"\r\nimport CustomButton from \"../custom-button/custom-button.component\"\r\n//import {auth, createUserProfileDocument } from \"../../firebase/firebase.utils\" \r\nimport {signUpStart} from \"../../redux/user/users.actions\"\r\n\r\nimport {connect} from \"react-redux\"\r\n\r\n\r\n\r\nclass SignUp extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            displayName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            phoneNumber: \"\"\r\n\r\n        }\r\n\r\n    }\r\n     handleSubmit = event => {   //didn't get why this method defined outside the construcotr and has obj destructuring \r\n        event.preventDefault()\r\n\r\n        const {displayName,email, password, confirmPassword} = this.state\r\n        const {signUpStart} =this.props\r\n        if (password !== confirmPassword){\r\n        alert(\"passwords don't match\")\r\n        signUpStart(email, password, displayName)\r\n        return\r\n    }/*\r\n    try{\r\n\r\n       const {user} = await auth.createUserWithEmailAndPassword(email,password)  //hover over to see fx\r\n\r\n       await createUserProfileDocument(user, {displayName})   //we are creating a new user in the db\r\n\r\n       this.setState({email: \"\" , password: \"\", displayName: \"\", confirmPassword: \"\", phoneNumber: \"\"})\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n\r\n    }*/\r\n        \r\n        \r\n     }\r\n\r\n     handleChange = event => {\r\n         const {value, name} = event.target\r\n         this.setState({[name]: value})\r\n     }\r\n\r\n\r\n    render()\r\n    {\r\n        //const {signUpStartProp} = this.props\r\n        return (\r\n            <div className = \"sign-up\">\r\n                <h2 className= \"title\">Don't have an account yet ?</h2>\r\n                <span>Sign up for new account.</span>\r\n\r\n                <form onSubmit = {this.handleSubmit}>\r\n                <FormInput name = \"displayName\"\r\n                     value ={this.state.displayName} \r\n                     type=\"text\" \r\n                     handleChange = {this.handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Full Name'\r\n                      required />\r\n\r\n                    <FormInput name = \"email\"\r\n                     value ={this.state.email} \r\n                     type=\"email\" \r\n                     handleChange = {this.handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Email'\r\n                      required />\r\n                    \r\n\r\n\r\n                    <FormInput type=\"password\"\r\n                     name = \"password\" \r\n                     value = {this.state.password} \r\n                     autoComplete = \"off\"\r\n                     handleChange = {this.handleChange}\r\n                     label = \"Password\"\r\n                      required />\r\n\r\n                      <FormInput name = \"confirmPassword\"\r\n                     value ={this.state.confirmPassword} \r\n                     type=\"password\" \r\n                     handleChange = {this.handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Confirm Password'\r\n                      required />\r\n\r\n                      <FormInput name = \"phoneNumber\"\r\n                     value ={this.state.phoneNumber} \r\n                     type=\"phone\" \r\n                     handleChange = {this.handleChange}\r\n                     autoComplete = \"on\"\r\n                     label = 'Mobile Number'\r\n                       />\r\n    \r\n                    <div className = \"buttons\">\r\n                    <CustomButton type=\"submit\" >SIGN UP\r\n                        </CustomButton>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )//used onClick mehtod to call signinwithgoogle fx from other folder\r\n    }  //used </CustomButton> bcz wanna use the children prop of that in custom button comp.\r\n}  //so by default isgooglesignin will pass the true value to the custom button\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signUpStart : (email, password) => dispatch(signUpStart(email, password))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp)"]},"metadata":{},"sourceType":"module"}