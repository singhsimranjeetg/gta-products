{"ast":null,"code":"import { userActionTypes } from \"./user.types\";\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n}; //NOTE: each reducer get the action we ever get fired, even though its not related\n//to that reducer. so in this case we will return a defualt value of state, which will \n//get the comp not to render which is related to this state.\n//whenever an action gets fired, we have two prop, one is the type which is unique and other is the payload,\n//that is similar to the props(contains some value)\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case userActionTypes.SIGNIN_SUCCESS:\n      //if ever the set current user action gets fired \n      return { ...state,\n        currentUser: action.payload,\n        error: null\n      };\n\n    case userActionTypes.SIGNIN_FAILURE: //if ever the set current user action gets fired \n\n    case userActionTypes.SIGN_OUT_FAILURE:\n    case userActionTypes.SIGNUP_FAILURE:\n      return { ...state,\n        error: action.payload\n      };\n\n    case userActionTypes.SIGN_OUT_SUCCESS:\n      return { ...state,\n        currentUser: null,\n        error: null\n      };\n\n    default:\n      return state;\n    //we none of the action type matches the current action, we will return the current state \n    //and this will not make the component to re render.\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/client/src/redux/user/user-reducer.js"],"names":["userActionTypes","INITIAL_STATE","currentUser","error","userReducer","state","action","type","SIGNIN_SUCCESS","payload","SIGNIN_FAILURE","SIGN_OUT_FAILURE","SIGNUP_FAILURE","SIGN_OUT_SUCCESS"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE,IADK;AAElBC,EAAAA,KAAK,EAAE;AAFW,CAAtB,C,CAKA;AACA;AACA;AAEA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,eAAe,CAACQ,cAArB;AAAuC;AACrC,aAAM,EACF,GAAGH,KADD;AAEFH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFlB;AAGFN,QAAAA,KAAK,EAAE;AAHL,OAAN;;AAME,SAAKH,eAAe,CAACU,cAArB,CARR,CAQgD;;AACxC,SAAKV,eAAe,CAACW,gBAArB;AACA,SAAKX,eAAe,CAACY,cAArB;AACE,aAAM,EACF,GAAGP,KADD;AAEFF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFZ,OAAN;;AAIA,SAAKT,eAAe,CAACa,gBAArB;AACI,aAAM,EACF,GAAGR,KADD;AAEFH,QAAAA,WAAW,EAAE,IAFX;AAGFC,QAAAA,KAAK,EAAG;AAHN,OAAN;;AAOV;AACI,aAAOE,KAAP;AAAe;AACf;AAzBR;AA6BH,CA9BD;;AAgCA,eAAeD,WAAf","sourcesContent":["import {userActionTypes} from \"./user.types\"\r\n\r\nconst INITIAL_STATE = {\r\n    currentUser: null,\r\n    error: null\r\n}\r\n\r\n//NOTE: each reducer get the action we ever get fired, even though its not related\r\n//to that reducer. so in this case we will return a defualt value of state, which will \r\n//get the comp not to render which is related to this state.\r\n\r\n//whenever an action gets fired, we have two prop, one is the type which is unique and other is the payload,\r\n//that is similar to the props(contains some value)\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case userActionTypes.SIGNIN_SUCCESS:   //if ever the set current user action gets fired \r\n          return{\r\n              ...state,\r\n              currentUser: action.payload,\r\n              error: null\r\n          }\r\n          \r\n            case userActionTypes.SIGNIN_FAILURE:    //if ever the set current user action gets fired \r\n            case userActionTypes.SIGN_OUT_FAILURE:\r\n            case userActionTypes.SIGNUP_FAILURE:\r\n              return{\r\n                  ...state,\r\n                  error: action.payload\r\n              }\r\n              case userActionTypes.SIGN_OUT_SUCCESS:\r\n                  return{\r\n                      ...state,\r\n                      currentUser: null, \r\n                      error : null\r\n                  }\r\n       \r\n    \r\n        default:\r\n            return state   //we none of the action type matches the current action, we will return the current state \r\n            //and this will not make the component to re render.\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default userReducer"]},"metadata":{},"sourceType":"module"}