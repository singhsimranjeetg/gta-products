{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { userActionTypes } from \"./user.types\";\nimport { auth, googleprovider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from \"./users.actions\"; //import {googleSignInStart, emailSignInStart} from \"./users.actions\"\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\n\nexport function* googleSignInAsyc() {\n  //yield console.log(\"hello\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleprovider); //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\n    // console.log(userRef) this userRef is the same userAuth object we were in App.js\n    //de structuring the user property off the obj returned by the aboove method and storing it in user var.\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* googleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc);\n}\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  //console.log(\"ballle mundya\")\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); //console.log(user)\n\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync);\n}\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","userActionTypes","auth","googleprovider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","googleSignInAsyc","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","googleSignInStart","GOOGLE_SIGNIN_START","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGNIN_START","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,QAAyC,oBAAzC;AAEA,SAASC,eAAT,QAA+B,cAA/B;AAEA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,QAA8D,+BAA9D;AAEA,SAAQC,mBAAR,EAA6BC,mBAA7B,EAAkDC,kBAAlD,EAAsEC,kBAAtE,QAA+F,iBAA/F,C,CAEA;AAEA;;AAEA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B;AAEA,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAArB,CADA,CAC0D;AAC3D;AACA;;AAEA,UAAMS,OAAO,GAAG,MAAMb,IAAI,CAACK,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACO,mBAAmB,CAAC;AAAEU,MAAAA,EAAE,EAAGF,YAAY,CAACE,EAApB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAD,CAApB,CAAT;AAGF,GAVD,CAUC,OAAMC,KAAN,EAAY;AACX,UAAMnB,GAAG,CAAEQ,mBAAmB,CAACW,KAAD,CAArB,CAAT;AACD;AAEJ;AAED,OAAO,UAAUC,iBAAV,GAA6B;AAChC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,mBAAjB,EAAsCV,gBAAtC,CAAhB;AACH;AAGD,OAAO,UAAUW,gBAAV,CAA2B;AAACC,EAAAA,OAAO,EAAG;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAX,CAA3B,EAAyD;AAC3D;AACD,MAAG;AAEF,UAAM;AAACb,MAAAA;AAAD,QAAS,MAAMR,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMX,OAAO,GAAG,MAAMb,IAAI,CAACK,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAJE,CAKF;;AAEA,UAAMhB,GAAG,CAAES,kBAAkB,CAAC;AAACQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAApB,CAAT;AAEA,GATD,CASC,OAAMC,KAAN,EAAY;AACT,UAAMnB,GAAG,CAACU,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AAEH;AACJ;AAED,OAAO,UAAUQ,gBAAV,GAA6B;AAChC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,kBAAjB,EAAqCN,gBAArC,CAAhB;AACH;AAYD,OAAO,UAAUO,SAAV,GAAqB;AACxB,QAAM3B,GAAG,CAAC,CACND,IAAI,CAACmB,iBAAD,CADE,EAENnB,IAAI,CAAC0B,gBAAD,CAFE,CAAD,CAAT;AAMH","sourcesContent":["import {takeLatest, put, call, all} from \"redux-saga/effects\"\r\n\r\nimport { userActionTypes} from \"./user.types\"\r\n\r\nimport {auth, googleprovider, createUserProfileDocument} from \"../../firebase/firebase.utils\"\r\n\r\nimport {googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure} from \"./users.actions\"\r\n\r\n//import {googleSignInStart, emailSignInStart} from \"./users.actions\"\r\n\r\n//import {createUserProfileDocument} from \"../../firebase/firebase.utils\"\r\n\r\nexport function* googleSignInAsyc(){\r\n    //yield console.log(\"hello\")\r\n\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleprovider) //not using the fx signinwithgoogle here, bcz we want access to the value returned from this method\r\n       // console.log(userRef) this userRef is the same userAuth object we were in App.js\r\n       //de structuring the user property off the obj returned by the aboove method and storing it in user var.\r\n\r\n       const userRef = yield call(createUserProfileDocument, user)\r\n       const userSnapshot = yield userRef.get()\r\n       yield put(googleSignInSuccess({ id : userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n\r\n    }catch(error){\r\n      yield put (googleSignInFailure(error))\r\n    }\r\n\r\n}\r\n\r\nexport function *googleSignInStart(){\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, googleSignInAsyc)\r\n}\r\n\r\n\r\nexport function* emailSignInAsync({payload : {email, password}}){\r\n     //console.log(\"ballle mundya\")\r\n    try{\r\n\r\n     const {user} = yield auth.signInWithEmailAndPassword(email, password)\r\n     const userRef = yield call(createUserProfileDocument, user)\r\n     const userSnapshot = yield userRef.get()\r\n     //console.log(user)\r\n\r\n     yield put( emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n    }catch(error){\r\n        yield put(emailSignInFailure(error))\r\n\r\n    }\r\n}\r\n\r\nexport function *emailSignInStart (){\r\n    yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, emailSignInAsync)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function *userSagas(){\r\n    yield all([\r\n        call(googleSignInStart),\r\n        call(emailSignInStart)\r\n               \r\n          \r\n    ])\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}