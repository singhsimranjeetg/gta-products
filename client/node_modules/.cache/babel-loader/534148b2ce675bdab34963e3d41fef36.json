{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simra\\\\Desktop\\\\gta-products-2\\\\src\\\\components\\\\cart-icon\\\\cart-icon.component.jsx\";\nimport React from \"react\";\nimport { ReactComponent as ShoppingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/shopping.bag.svg\";\nimport \"./cart-icon.styles.scss\";\nimport { connect } from \"react-redux\"; //we need this for using reducers\n\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions\";\nimport { selectCartItemsCount } from \"../../redux/cart/cart.selector\";\nimport { createStructuredSelector } from \"reselect\";\n\nconst CartIcon = ({\n  toggleCartHidden,\n  itemCount\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"cart-icon\",\n  onClick: toggleCartHidden,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(ShoppingIcon, {\n  className: \"shopping-icon\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  className: \"item-count\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}, itemCount)); //with the dispatch(togglecarthiiden we are passing that action type to the cart reducer)\n\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden()) //pushing the onclick on icon to the state\n\n});\n\nconst mapStateToProps = createStructuredSelector({\n  //pulling state in to use to show cartItem length in cart icon\n  itemCount: selectCartItemsCount //second arguement is pulling the quantitiy prop off the cartItem array\n\n}); //mathod used before selectors\n\n/*\r\nconst mapStateToProps = ({cart : {cartItems}}) => {  \r\n    //console.log(\"i got called form cart-icon\")\r\n    return { //pulling state in to use to show cartItem length in cart icon\r\n    itemCount: cartItems.reduce((accumulatedQuantity, currentItemQuantity) =>\r\n    accumulatedQuantity + currentItemQuantity.quantity, 0)   //second arguement is pulling the quantitiy prop off the cartItem array\r\n    \r\n} } */\n//here we can start new fx methods on the state and pass those to any element. \n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon); //we use mapDispatch we want to pass an action to the reducers,\n//now the action type is togglecartHidden that will match the cart reducer\n//the cart reducer then toggle it to the other boolean value.","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/components/cart-icon/cart-icon.component.jsx"],"names":["React","connect","toggleCartHidden","selectCartItemsCount","createStructuredSelector","CartIcon","itemCount","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,yBAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAAoC;;AACpC,SAAQC,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,oBAAR,QAAmC,gCAAnC;AACA,SAAQC,wBAAR,QAAuC,UAAvC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACH,EAAAA,gBAAD;AAAmBI,EAAAA;AAAnB,CAAD,kBAEb;AAAK,EAAA,SAAS,EAAG,WAAjB;AAA6B,EAAA,OAAO,EAAIJ,gBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,YAAD;AAAc,EAAA,SAAS,EAAG,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,eAEI;AAAM,EAAA,SAAS,EAAG,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAgCI,SAAhC,CAFJ,CAFJ,C,CAQA;;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCN,EAAAA,gBAAgB,EAAE,MAAMM,QAAQ,CAACN,gBAAgB,EAAjB,CADI,CACoB;;AADpB,CAAL,CAAnC;;AAIA,MAAMO,eAAe,GAAGL,wBAAwB,CAAC;AAAG;AAChDE,EAAAA,SAAS,EAAEH,oBADkC,CACH;;AADG,CAAD,CAAhD,C,CAMA;;AACA;;;;;;;;AAOM;;AAEN,eAAeF,OAAO,CAACQ,eAAD,EAAkBF,kBAAlB,CAAP,CAA8CF,QAA9C,CAAf,C,CAEA;AACA;AACA","sourcesContent":["import React from \"react\"\r\nimport {ReactComponent as ShoppingIcon} from \"../../assets/shopping.bag.svg\"\r\nimport \"./cart-icon.styles.scss\"\r\nimport {connect} from \"react-redux\" //we need this for using reducers\r\nimport {toggleCartHidden} from \"../../redux/cart/cart.actions\"\r\nimport {selectCartItemsCount} from \"../../redux/cart/cart.selector\" \r\nimport {createStructuredSelector} from \"reselect\"\r\n\r\nconst CartIcon = ({toggleCartHidden, itemCount}) => (\r\n    \r\n    <div className = \"cart-icon\" onClick = {toggleCartHidden}>\r\n        <ShoppingIcon className = \"shopping-icon\" />\r\n        <span className = \"item-count\">{itemCount}</span>\r\n    </div>\r\n    \r\n)\r\n//with the dispatch(togglecarthiiden we are passing that action type to the cart reducer)\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleCartHidden: () => dispatch(toggleCartHidden())    //pushing the onclick on icon to the state\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({  //pulling state in to use to show cartItem length in cart icon\r\n    itemCount: selectCartItemsCount           //second arguement is pulling the quantitiy prop off the cartItem array\r\n    \r\n})\r\n\r\n\r\n//mathod used before selectors\r\n/*\r\nconst mapStateToProps = ({cart : {cartItems}}) => {  \r\n    //console.log(\"i got called form cart-icon\")\r\n    return { //pulling state in to use to show cartItem length in cart icon\r\n    itemCount: cartItems.reduce((accumulatedQuantity, currentItemQuantity) =>\r\n    accumulatedQuantity + currentItemQuantity.quantity, 0)   //second arguement is pulling the quantitiy prop off the cartItem array\r\n    \r\n} } *///here we can start new fx methods on the state and pass those to any element. \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (CartIcon)\r\n\r\n//we use mapDispatch we want to pass an action to the reducers,\r\n//now the action type is togglecartHidden that will match the cart reducer\r\n//the cart reducer then toggle it to the other boolean value."]},"metadata":{},"sourceType":"module"}