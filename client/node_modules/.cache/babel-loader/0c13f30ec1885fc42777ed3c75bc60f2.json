{"ast":null,"code":"import { shopActionTypes } from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collecctionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStartAsync());\n    collecctionRef.get().then(collectionData => {\n      //get tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\n      //console.log(snapshot)\n      const collectionsMap = convertCollectionsSnapshotToMap(collectionData);\n      dispatch(fetchCollectionsSuccess(collectionsMap)).catch(err => dispatch(fetchCollectionsFailure(err.message))); //console.log(collectionsMap)\n    });\n  };\n};\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMsg => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMsg\n}); //console.log(collecctionRef)\n\n/* using REST API to access data \r\nfetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\nthis.setState({loading : false}) //this will give us an error because collections is null.*/\n//using the promises pattern\n\n/* observable pattern \r\ncollecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n//console.log(snapshot)\r\nconst collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n//console.log(collectionsMap)\r\nupdateCollections(collectionsMap)  //selector method to send the new state to redux\r\nthis.setState({loading : false})\r\n} )  */","map":{"version":3,"sources":["C:/Users/simra/Desktop/gta-products-2/src/redux/shop/shop.actions.js"],"names":["shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","dispatch","collecctionRef","collection","get","then","collectionData","collectionsMap","fetchCollectionsSuccess","catch","err","fetchCollectionsFailure","message","type","FETCH_COLLECTIONS_SUCCESS","payload","errorMsg","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA0D,+BAA1D;AAEA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAChD,SAAOC,QAAQ,IAAI;AACf,UAAMC,cAAc,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAvB;AACAF,IAAAA,QAAQ,CAACD,0BAA0B,EAA3B,CAAR;AAEDE,IAAAA,cAAc,CAACE,GAAf,GAAqBC,IAArB,CAA4BC,cAAc,IAAI;AAAE;AAC7C;AACF,YAAMC,cAAc,GAAIR,+BAA+B,CAACO,cAAD,CAAvD;AACAL,MAAAA,QAAQ,CAACO,uBAAuB,CAACD,cAAD,CAAxB,CAAR,CACAE,KADA,CACMC,GAAG,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,GAAG,CAACE,OAAL,CAAxB,CADrB,EAH6C,CAK7C;AAIA,KATD;AAUF,GAdD;AAgBC,CAjBM;AAmBP,OAAO,MAAMJ,uBAAuB,GAAID,cAAD,KAAqB;AACxDM,EAAAA,IAAI,EAAEhB,eAAe,CAACiB,yBADkC;AAExDC,EAAAA,OAAO,EAAER;AAF+C,CAArB,CAAhC;AAMP,OAAO,MAAMI,uBAAuB,GAAGK,QAAQ,KAAK;AAChDH,EAAAA,IAAI,EAAEhB,eAAe,CAACoB,yBAD0B;AAEhDF,EAAAA,OAAO,EAAEC;AAFuC,CAAL,CAAxC,C,CAUN;;AACE;;;AAIE;;AAIG","sourcesContent":["import {shopActionTypes} from \"./shop.types\"\r\nimport  {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\"\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\nreturn dispatch => {\r\n    const collecctionRef = firestore.collection(\"collections\")\r\n    dispatch(fetchCollectionsStartAsync())\r\n\r\n   collecctionRef.get().then(( collectionData => { //get tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n      //console.log(snapshot)\r\n    const collectionsMap =  convertCollectionsSnapshotToMap(collectionData)\r\n    dispatch(fetchCollectionsSuccess(collectionsMap)).\r\n    catch(err => dispatch(fetchCollectionsFailure(err.message)))\r\n    //console.log(collectionsMap)\r\n\r\n      \r\n    \r\n   } ))\r\n}\r\n    \r\n}\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n})\r\n\r\n\r\nexport const fetchCollectionsFailure = errorMsg => ({\r\n    type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMsg\r\n})\r\n \r\n\r\n\r\n\r\n\r\n\r\n //console.log(collecctionRef)\r\n   /* using REST API to access data \r\n   fetch('https://firestore.googleapis.com/v1/projects/gtaproducts-db/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections))\r\n   this.setState({loading : false}) //this will give us an error because collections is null.*/\r\n\r\n     //using the promises pattern\r\n\r\n\r\n\r\n        /* observable pattern \r\n     collecctionRef.onSnapshot(async snapshot => { //onSnapShot tells whenever our collectionRef changes or comp renders for the first time, we want to get the data of collections\r\n        //console.log(snapshot)\r\n      const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n      //console.log(collectionsMap)\r\n      updateCollections(collectionsMap)  //selector method to send the new state to redux\r\n      this.setState({loading : false})\r\n     } )  */ \r\n"]},"metadata":{},"sourceType":"module"}